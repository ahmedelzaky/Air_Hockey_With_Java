@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.air_hockey_with_java.Game",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1093611960 { 
   	label=air_hockey_with_java
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Ball1297687803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Ball</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   xVelocity: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yVelocity: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ intersects(player: Player): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ move()</TD></TR>
<TR><TD ALIGN="LEFT" >+ rest(y: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game1297687803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   ball: Ball [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ballAnimation: Timeline [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   clicked: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   closeChecker: Timeline [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fnt: Font [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   game: GameFrame [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   menu: Menu [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   p1: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   p1Score: Text [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   p1status: Text [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   p2: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   p2Score: Text [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   p2status: Text [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerAnimation: Timeline [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   progressBar: LoadingBar [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkCollision()</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkScore()</TD></TR>
<TR><TD ALIGN="LEFT" >+ closeCheck(stage: Stage)</TD></TR>
<TR><TD ALIGN="LEFT" >+ gameReset()</TD></TR>
<TR><TD ALIGN="LEFT" >+ isClicked()</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadingAnimation()</TD></TR>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ start(stage: Stage)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GameFrame1297687803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameFrame</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   arcRaduis: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- gArc(x: int, y: int, xR: int, yR: int, a1: int, a2: int): Arc</TD></TR>
<TR><TD ALIGN="LEFT" >- gline(sX: int, sY: int, eX: int, eY: int): Line</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

LoadingBar1297687803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)LoadingBar</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   label: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingAnimation: Timeline [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingBar: ProgressBar [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   loadingP: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   progressBar: ProgressBar [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ animationPlay()</TD></TR>
<TR><TD ALIGN="LEFT" >+ finish(): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Menu1297687803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Menu</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   close: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   fnt: Font [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mute: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   resetValue: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ close()</TD></TR>
<TR><TD ALIGN="LEFT" >+ reset()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player1297687803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   Xoffset: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   Yoffset: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   score: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   x: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   xVelocity: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   y: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yVelocity: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Move()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addPoint()</TD></TR>
<TR><TD ALIGN="LEFT" >+ keyPressed(event: KeyEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ keyReleased(event: KeyEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ rest()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Game1297687803 -> Ball1297687803[label="ball
[0..1]"];
Game1297687803 -> GameFrame1297687803[label="game
[0..1]"];
Game1297687803 -> LoadingBar1297687803[label="progressBar
[0..1]"];
Game1297687803 -> Menu1297687803[label="menu
[0..1]"];
Game1297687803 -> Player1297687803[label="p1
[0..1]"];
Game1297687803 -> Player1297687803[label="p2
[0..1]"];
    
}
@enduml